#include <stdio.h>

#define INF 999
#define MAX 10

void prim(int cost[MAX][MAX], int n) {
    int visited[MAX] = {0};  // Track visited vertices
    int edges = 0;           // Number of edges in MST
    int minCost = 0;         // Total cost of MST

    visited[0] = 1;  // Start from the first vertex

    while (edges < n - 1) {
        int min = INF;
        int u = -1, v = -1;

        // Find the minimum edge (u, v) where u is visited and v is not
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                for (int j = 0; j < n; j++) {
                    if (!visited[j] && cost[i][j] < min) {
                        min = cost[i][j];
                        u = i;
                        v = j;
                    }
                }
            }
        }

        // Include this edge in MST
        visited[v] = 1;
        minCost += min;
        edges++;
        printf("Edge %d: (%d -> %d) cost: %d\n", edges, u + 1, v + 1, min);
    }

    printf("Minimum cost of MST: %d\n", minCost);
}

int main() {
    int cost[MAX][MAX], n;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix (999 for no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    prim(cost, n);

    return 0;
}
